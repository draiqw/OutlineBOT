# handlers.py

import re
from datetime import datetime, timedelta
from telegram import Update, KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import ConversationHandler, CallbackContext
from database import get_user, add_user, update_user_key, update_subscription
from keys import create_outline_key
from constants import KEY_NAME, INFO_DESCRIPTION

def get_menu_keyboard(user_id=None):
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç –ø–æ—Å—Ç–æ—è–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è.
    –î–æ–±–∞–≤–ª–µ–Ω—ã —ç–º–æ–¥–∑–∏ –∏ —Å—Ç–∏–ª–∏–∑–∞—Ü–∏—è.
    """
    if user_id is not None and get_user(user_id):
        buttons = [
            ["üë§ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", "üöÄ –ü–æ–ª—É—á–∏—Ç—å –∫–ª—é—á"],
            ["üîë –ú–æ–∏ –∫–ª—é—á–∏", "üìã –ú–µ–Ω—é"]
        ]
    else:
        buttons = [
            ["üî• –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", "üöÄ –ü–æ–ª—É—á–∏—Ç—å –∫–ª—é—á", "üìã –ú–µ–Ω—é"]
        ]
    return ReplyKeyboardMarkup(buttons, one_time_keyboard=False, resize_keyboard=True)

def format_date(date_str: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞—Ç—É –∏–∑ ISO –≤ —Ñ–æ—Ä–º–∞—Ç '–î–î.MM.–ì–ì–ì–ì –ß–ß:–ú–ú'."""
    try:
        dt = datetime.fromisoformat(date_str)
        return dt.strftime("%d.%m.%Y %H:%M")
    except Exception:
        return date_str

def start(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    context.bot.send_chat_action(chat_id=update.effective_chat.id, action="typing")
    update.message.reply_text(
        "<b>–ü—Ä–∏–≤–µ—Ç!</b>\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "<b>/reg</b> - —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è (<i>–≤ –ø–æ–¥–∞—Ä–æ–∫ –Ω–µ–¥–µ–ª—è –ø—Ä–æ–±–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏</i>)\n"
        "<b>/get_key</b> - –ø–æ–ª—É—á–∏—Ç—å Outline –∫–ª—é—á\n"
        "<b>/profile</b> - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å\n"
        "<b>/my_keys</b> - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –∫–ª—é—á–∏\n"
        "<b>/subscribe</b> - –æ–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É (100 —Ä—É–±/–º–µ—Å, –æ–ø–ª–∞—Ç–∞ —É—Å–ª–æ–≤–Ω–∞—è)\n"
        "<b>/info</b> - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏ –≥–∞–π–¥—ã\n\n"
        "–ò–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –≤ –º–µ–Ω—é –Ω–∏–∂–µ.",
        parse_mode="HTML",
        reply_markup=get_menu_keyboard(user_id)
    )

def reg(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    if get_user(user_id):
        update.message.reply_text("‚ö†Ô∏è <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.</b>", parse_mode="HTML", reply_markup=get_menu_keyboard(user_id))
        return
    keyboard = [[KeyboardButton("üì≤ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º", request_contact=True)]]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=False, resize_keyboard=True)
    update.message.reply_text(
        "–°—É–ø–µ—Ä! –î–∞–≤–∞–π –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º—Å—è.\n–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º.\n–í –ø–æ–¥–∞—Ä–æ–∫ ‚Äì <b>–Ω–µ–¥–µ–ª—è –ø—Ä–æ–±–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏</b>!",
        parse_mode="HTML",
        reply_markup=reply_markup
    )

def contact_handler(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    contact = update.message.contact
    if contact:
        if contact.user_id != user_id:
            update.message.reply_text("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–º.", reply_markup=get_menu_keyboard(user_id))
            return
        if get_user(user_id):
            update.message.reply_text("‚ö†Ô∏è <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.</b>", parse_mode="HTML", reply_markup=get_menu_keyboard(user_id))
        else:
            add_user(user_id, contact.phone_number)
            trial_expiry = (datetime.now() + timedelta(days=7)).isoformat(timespec='seconds')
            formatted_expiry = format_date(trial_expiry)
            update.message.reply_text(
                "üéâ <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!</b>\n–í –ø–æ–¥–∞—Ä–æ–∫ –≤–∞–º –Ω–µ–¥–µ–ª—è –ø—Ä–æ–±–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏, –¥–µ–π—Å—Ç–≤—É—é—â–∞—è –¥–æ: <b>" + formatted_expiry + "</b>.\n"
                "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è Outline –∫–ª—é—á–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ <b>/get_key</b> –∏–ª–∏ –∫–Ω–æ–ø–∫—É <b>üöÄ –ü–æ–ª—É—á–∏—Ç—å –∫–ª—é—á</b>.",
                parse_mode="HTML",
                reply_markup=get_menu_keyboard(user_id)
            )

def get_key(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    user = get_user(user_id)
    if not user:
        update.message.reply_text(
            "‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π <b>/reg</b> –∏ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –∫–æ–Ω—Ç–∞–∫—Ç–æ–º.",
            parse_mode="HTML",
            reply_markup=get_menu_keyboard(user_id)
        )
        return ConversationHandler.END
    if user[2]:
        update.message.reply_text(
            f"üîë <b>–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∫–ª—é—á</b> (–¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –∫–ª—é—á –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è):\n<code>{user[2]}</code>",
            parse_mode="HTML",
            reply_markup=get_menu_keyboard(user_id)
        )
        return ConversationHandler.END
    context.user_data["awaiting_key_name"] = True
    update.message.reply_text("üöÄ <b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –¥–ª—è –∫–ª—é—á–∞:</b>", parse_mode="HTML", reply_markup=ReplyKeyboardRemove())
    return KEY_NAME

def key_name_handler(update: Update, context: CallbackContext):
    context.user_data["awaiting_key_name"] = False
    user_id = update.effective_user.id
    key_name = update.message.text.strip()
    if key_name.lower() in ["—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", "–ø–æ–ª—É—á–∏—Ç—å –∫–ª—é—á", "–º–µ–Ω—é", "–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", "–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –∫–ª—é—á–∏"]:
        update.message.reply_text("‚ö†Ô∏è <b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è –¥–ª—è –∫–ª—é—á–∞:</b>", parse_mode="HTML", reply_markup=ReplyKeyboardRemove())
        context.user_data["awaiting_key_name"] = True
        return KEY_NAME
    # –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–¥–µ—Ä–∂–∫—É (typing)
    context.bot.send_chat_action(chat_id=update.effective_chat.id, action="typing")
    key = create_outline_key(key_name)
    update_user_key(user_id, key)
    update.message.reply_text(
        f"üîë <b>–í–∞—à Outline –∫–ª—é—á:</b>\n<code>{key}</code>",
        parse_mode="HTML",
        reply_markup=get_menu_keyboard(user_id)
    )
    return ConversationHandler.END

def profile(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    user = get_user(user_id)
    if not user:
        update.message.reply_text("‚ö†Ô∏è –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É <b>/reg</b> –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.", parse_mode="HTML")
    else:
        formatted_expiry = format_date(user[3]) if user[3] else "–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
        update.message.reply_text(
            f"üë§ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:</b>\n<b>ID:</b> {user[0]}\n<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {user[1]}\n<b>–ü–æ–¥–ø–∏—Å–∫–∞ –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ:</b> {formatted_expiry}",
            parse_mode="HTML",
            reply_markup=get_menu_keyboard(user_id)
        )

def my_keys(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    user = get_user(user_id)
    if not user:
        update.message.reply_text("‚ö†Ô∏è –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É <b>/reg</b> –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.", parse_mode="HTML", reply_markup=get_menu_keyboard(user_id))
    elif user[2]:
        update.message.reply_text(
            f"üîë <b>–í–∞—à Outline –∫–ª—é—á:</b>\n<code>{user[2]}</code>",
            parse_mode="HTML",
            reply_markup=get_menu_keyboard(user_id)
        )
    else:
        update.message.reply_text("‚ö†Ô∏è –£ –≤–∞—Å –µ—â—ë –Ω–µ—Ç –∫–ª—é—á–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É <b>/get_key</b> –∏–ª–∏ –∫–Ω–æ–ø–∫—É <b>üöÄ –ü–æ–ª—É—á–∏—Ç—å –∫–ª—é—á</b>.", parse_mode="HTML", reply_markup=get_menu_keyboard(user_id))

def subscribe(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    user = get_user(user_id)
    if not user:
        update.message.reply_text("‚ö†Ô∏è –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ <b>/reg</b> –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.", parse_mode="HTML", reply_markup=get_menu_keyboard(user_id))
        return
    new_expiry = (datetime.now() + timedelta(days=30)).isoformat(timespec='seconds')
    update_subscription(user_id, new_expiry)
    formatted_expiry = format_date(new_expiry)
    update.message.reply_text(
        "üí≥ <b>–ü–æ–∫–∞ –æ–ø–ª–∞—Ç–∞ —É—Å–ª–æ–≤–Ω–∞—è</b>, –Ω–æ –ø–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∞ –Ω–∞ 30 –¥–Ω–µ–π!\n–ü–æ–¥–ø–∏—Å–∫–∞ –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: <b>" + formatted_expiry + "</b>.",
        parse_mode="HTML",
        reply_markup=get_menu_keyboard(user_id)
    )

def info(update: Update, context: CallbackContext):
    update.message.reply_text(INFO_DESCRIPTION, parse_mode="HTML", disable_web_page_preview=True, reply_markup=ReplyKeyboardRemove())

def show_menu(update: Update, context: CallbackContext):
    menu_text = (
        "üìã <b>–ú–µ–Ω—é:</b>\n"
        "/reg - —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è\n"
        "/get_key - –ø–æ–ª—É—á–∏—Ç—å Outline –∫–ª—é—á\n"
        "/profile - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å\n"
        "/my_keys - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –∫–ª—é—á–∏\n"
        "/subscribe - –æ–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É\n"
        "/info - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏ –≥–∞–π–¥—ã"
    )
    update.message.reply_text(menu_text, parse_mode="HTML", reply_markup=ReplyKeyboardRemove())

def global_text_handler(update: Update, context: CallbackContext):
    # –ï—Å–ª–∏ –±–æ—Ç –æ–∂–∏–¥–∞–µ—Ç –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –∫–ª—é—á–∞, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    if context.user_data.get("awaiting_key_name"):
        return
    show_menu(update, context)
